/*
	Eric Eckert
	Homework 5
	CSE 414 Spring 16
	Suciu
*/

/*  Query 1

Retrieve all the names of all the cities located in Peru, sorted alphabetically.

Result: 30 rows 
*/

select c.name city
from mondial x 
unnest x.mondial.country y
unnest y.province p
unnest p.city c
where y.name='Peru'
order by c.name;


/* 
Query 2

For each country return its name, its population, and the number of religions, sorted 
alphabetically by country.

Result: 238 rows
*/

select y.name country, y.population population, array_length(y.religion) no_religions
from mondial x 
unnest x.mondial.country y
order by y.name;


/*
Query 3

For each country that has provinces return its name, the number of provinces, and the number 
of cities, sorted alphabetically by country. 

Result: 59 rows
*/

select y.name country, array_length(y.province) no_provinces, count(c) no_cities
from mondial x 
unnest x.mondial.country y
unnest y.province p
unnest p.city c
group by y.name, y.province
order by y.name;


/*
Query 4

Find all countries with 20 provinces or more. Return the country name and the number of 
provinces. Order descending by the number of provinces and then ascending by the country name. 

Result: 26 rows
*/

select distinct y.name country, array_length(y.province) no_provinces
from mondial x
unnest x.mondial.country y
unnest y.province p
where array_length(y.province) >= 20
order by no_provinces desc, y.name;


/*
Query 5

For each province(state) in the United States, compute the ratio of its population to area, 
and return each province's name, its computed ratio, and order them descending by the ratio. 

Result: 51 rows
*/

select p.name state, tonumber(p.population) / tonumber(p.area) pop_ratio
from mondial x
unnest x.mondial.country y
unnest y.province p
where y.name = 'United States'
group by p
order by pop_ratio desc;


/*
Query 6

For each country return its name and the number of mountains in that country, sorted 
alphabetically by country.

Result: 43 or 84 rows
*/

select c.name country, count(m) no_mountains
from mondial x
unnest x.mondial z
unnest z.country c
unnest z.mountain m
where c.["-car_code"] = m.["-country"] 
group by c
order by c.name;


/*
Query 7

For each country return its name and the names and heights of all mountains over 2000m high. 
Return objects of the form country name, mountain name, mountain height where the country 
name is repeated for each of its mountains. Sort your results by country name and then 
mountain name. 

Result: 149 or 168 rows
*/

select c.name country, m.name mountain, m.height
from mondial x
unnest x.mondial z
unnest z.country c
unnest z.mountain m
where c.["-car_code"] = m.["-country"]
and tonumber(m.height) > 2000
order by m.name, c.name;


/*
Query 8

For each river which crosses two more more countries, return its name, and the full names 
(not country code) of the countries that it crosses. Return objects of the form river name, 
country name where the river name is repeated for each country it crosses. Sort your answers 
by the river name and then country name(s).

Result: 144 rows
*/

select r.name river, c.name country
from mondial x
unnest x.mondial z
unnest z.country c
unnest z.river r
unnest r.located l
where c.["-car_code"] = l.["-country"]
and array_length(r.located) > 1
order by r.name, c.name;